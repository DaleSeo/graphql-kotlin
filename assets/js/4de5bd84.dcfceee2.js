"use strict";(self.webpackChunkgraphql_kotlin_docs=self.webpackChunkgraphql_kotlin_docs||[]).push([[6495],{95986:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"3.x.x","label":"3.x.x","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-3.x.x","isLast":false,"docsSidebars":{"docs":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"Getting Started","href":"/graphql-kotlin/docs/3.x.x/","docId":"getting-started","unlisted":false},{"type":"link","label":"Examples","href":"/graphql-kotlin/docs/3.x.x/examples","docId":"examples","unlisted":false},{"type":"link","label":"Blogs & Videos","href":"/graphql-kotlin/docs/3.x.x/blogs-and-videos","docId":"blogs-and-videos","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Schema Generator","items":[{"type":"link","label":"Getting Started with the Schema Generator","href":"/graphql-kotlin/docs/3.x.x/schema-generator/schema-generator-getting-started","docId":"schema-generator/schema-generator-getting-started","unlisted":false},{"type":"category","label":"Writing schemas with Kotlin","items":[{"type":"link","label":"Nullability","href":"/graphql-kotlin/docs/3.x.x/schema-generator/writing-schemas/nullability","docId":"schema-generator/writing-schemas/nullability","unlisted":false},{"type":"link","label":"Arguments","href":"/graphql-kotlin/docs/3.x.x/schema-generator/writing-schemas/arguments","docId":"schema-generator/writing-schemas/arguments","unlisted":false},{"type":"link","label":"Scalars","href":"/graphql-kotlin/docs/3.x.x/schema-generator/writing-schemas/scalars","docId":"schema-generator/writing-schemas/scalars","unlisted":false},{"type":"link","label":"Enums","href":"/graphql-kotlin/docs/3.x.x/schema-generator/writing-schemas/enums","docId":"schema-generator/writing-schemas/enums","unlisted":false},{"type":"link","label":"Lists","href":"/graphql-kotlin/docs/3.x.x/schema-generator/writing-schemas/lists","docId":"schema-generator/writing-schemas/lists","unlisted":false},{"type":"link","label":"Interfaces","href":"/graphql-kotlin/docs/3.x.x/schema-generator/writing-schemas/interfaces","docId":"schema-generator/writing-schemas/interfaces","unlisted":false},{"type":"link","label":"Unions","href":"/graphql-kotlin/docs/3.x.x/schema-generator/writing-schemas/unions","docId":"schema-generator/writing-schemas/unions","unlisted":false},{"type":"link","label":"Annotations","href":"/graphql-kotlin/docs/3.x.x/schema-generator/writing-schemas/annotations","docId":"schema-generator/writing-schemas/annotations","unlisted":false},{"type":"link","label":"Nested Resolvers and Shared Arguments","href":"/graphql-kotlin/docs/3.x.x/schema-generator/writing-schemas/nested-arguments","docId":"schema-generator/writing-schemas/nested-arguments","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Customizing Schema","items":[{"type":"link","label":"Generator Configuration","href":"/graphql-kotlin/docs/3.x.x/schema-generator/customizing-schemas/generator-config","docId":"schema-generator/customizing-schemas/generator-config","unlisted":false},{"type":"link","label":"Documenting Schema","href":"/graphql-kotlin/docs/3.x.x/schema-generator/customizing-schemas/documenting-fields","docId":"schema-generator/customizing-schemas/documenting-fields","unlisted":false},{"type":"link","label":"Excluding Fields","href":"/graphql-kotlin/docs/3.x.x/schema-generator/customizing-schemas/excluding-fields","docId":"schema-generator/customizing-schemas/excluding-fields","unlisted":false},{"type":"link","label":"Renaming Fields","href":"/graphql-kotlin/docs/3.x.x/schema-generator/customizing-schemas/renaming-fields","docId":"schema-generator/customizing-schemas/renaming-fields","unlisted":false},{"type":"link","label":"Directives","href":"/graphql-kotlin/docs/3.x.x/schema-generator/customizing-schemas/directives","docId":"schema-generator/customizing-schemas/directives","unlisted":false},{"type":"link","label":"Deprecating Schema","href":"/graphql-kotlin/docs/3.x.x/schema-generator/customizing-schemas/deprecating-schema","docId":"schema-generator/customizing-schemas/deprecating-schema","unlisted":false},{"type":"link","label":"Advanced Features","href":"/graphql-kotlin/docs/3.x.x/schema-generator/customizing-schemas/advanced-features","docId":"schema-generator/customizing-schemas/advanced-features","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Execution","items":[{"type":"link","label":"Fetching Data","href":"/graphql-kotlin/docs/3.x.x/schema-generator/execution/fetching-data","docId":"schema-generator/execution/fetching-data","unlisted":false},{"type":"link","label":"Async Models","href":"/graphql-kotlin/docs/3.x.x/schema-generator/execution/async-models","docId":"schema-generator/execution/async-models","unlisted":false},{"type":"link","label":"Exceptions and Partial Data","href":"/graphql-kotlin/docs/3.x.x/schema-generator/execution/exceptions","docId":"schema-generator/execution/exceptions","unlisted":false},{"type":"link","label":"Data Fetching Environment","href":"/graphql-kotlin/docs/3.x.x/schema-generator/execution/data-fetching-environment","docId":"schema-generator/execution/data-fetching-environment","unlisted":false},{"type":"link","label":"Contextual Data","href":"/graphql-kotlin/docs/3.x.x/schema-generator/execution/contextual-data","docId":"schema-generator/execution/contextual-data","unlisted":false},{"type":"link","label":"Optional Undefined Arguments","href":"/graphql-kotlin/docs/3.x.x/schema-generator/execution/optional-undefined-arguments","docId":"schema-generator/execution/optional-undefined-arguments","unlisted":false},{"type":"link","label":"Subscriptions","href":"/graphql-kotlin/docs/3.x.x/schema-generator/execution/subscriptions","docId":"schema-generator/execution/subscriptions","unlisted":false},{"type":"link","label":"Introspection","href":"/graphql-kotlin/docs/3.x.x/schema-generator/execution/introspection","docId":"schema-generator/execution/introspection","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Federation","items":[{"type":"link","label":"Apollo Federation","href":"/graphql-kotlin/docs/3.x.x/federated/apollo-federation","docId":"federated/apollo-federation","unlisted":false},{"type":"link","label":"Federated Schemas","href":"/graphql-kotlin/docs/3.x.x/federated/federated-schemas","docId":"federated/federated-schemas","unlisted":false},{"type":"link","label":"Federated Directives","href":"/graphql-kotlin/docs/3.x.x/federated/federated-directives","docId":"federated/federated-directives","unlisted":false},{"type":"link","label":"Federated Type Resolution","href":"/graphql-kotlin/docs/3.x.x/federated/type-resolution","docId":"federated/type-resolution","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Spring Server","items":[{"type":"link","label":"Spring Server Overview","href":"/graphql-kotlin/docs/3.x.x/spring-server/spring-overview","docId":"spring-server/spring-overview","unlisted":false},{"type":"link","label":"Automatically Created Beans","href":"/graphql-kotlin/docs/3.x.x/spring-server/spring-beans","docId":"spring-server/spring-beans","unlisted":false},{"type":"link","label":"Configuration Properties","href":"/graphql-kotlin/docs/3.x.x/spring-server/spring-properties","docId":"spring-server/spring-properties","unlisted":false},{"type":"link","label":"Writing Schemas with Spring","href":"/graphql-kotlin/docs/3.x.x/spring-server/spring-schema","docId":"spring-server/spring-schema","unlisted":false},{"type":"link","label":"Generating GraphQL Context","href":"/graphql-kotlin/docs/3.x.x/spring-server/spring-graphql-context","docId":"spring-server/spring-graphql-context","unlisted":false},{"type":"link","label":"Access the HTTP Request-Response","href":"/graphql-kotlin/docs/3.x.x/spring-server/http-request-response","docId":"spring-server/http-request-response","unlisted":false},{"type":"link","label":"Subscriptions","href":"/graphql-kotlin/docs/3.x.x/spring-server/subscriptions","docId":"spring-server/subscriptions","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"HTTP Client","items":[{"type":"link","label":"Client Overview","href":"/graphql-kotlin/docs/3.x.x/client/client-overview","docId":"client/client-overview","unlisted":false},{"type":"link","label":"Client Features","href":"/graphql-kotlin/docs/3.x.x/client/client-features","docId":"client/client-features","unlisted":false},{"type":"link","label":"Client Customization","href":"/graphql-kotlin/docs/3.x.x/client/client-customization","docId":"client/client-customization","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Build Plugins","items":[{"type":"link","label":"Gradle Plugin","href":"/graphql-kotlin/docs/3.x.x/plugins/gradle-plugin","docId":"plugins/gradle-plugin","unlisted":false},{"type":"link","label":"Maven Plugin","href":"/graphql-kotlin/docs/3.x.x/plugins/maven-plugin","docId":"plugins/maven-plugin","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Contributors","items":[{"type":"link","label":"Releasing a new version","href":"/graphql-kotlin/docs/3.x.x/contributors/release-proc","docId":"contributors/release-proc","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"blogs-and-videos":{"id":"blogs-and-videos","title":"Blogs & Videos","description":"Here are some links to other blog posts and videos which may provide further examples and reading.","sidebar":"docs"},"client/client-customization":{"id":"client/client-customization","title":"Client Customization","description":"Ktor HTTP Client Customization","sidebar":"docs"},"client/client-features":{"id":"client/client-features","title":"Client Features","description":"Polymorphic Types\xa0Support","sidebar":"docs"},"client/client-overview":{"id":"client/client-overview","title":"Client Overview","description":"graphql-kotlin-client is a lightweight type-safe GraphQL HTTP client. Type-safe data models are generated at build time","sidebar":"docs"},"contributors/release-proc":{"id":"contributors/release-proc","title":"Releasing a new version","description":"In order to release a new version we need to draft a new release","sidebar":"docs"},"examples":{"id":"examples","title":"Examples","description":"A collection of example apps that use graphql-kotlin libraries to test and demonstrate usages can be found in the examples module.","sidebar":"docs"},"federated/apollo-federation":{"id":"federated/apollo-federation","title":"Apollo Federation","description":"In many cases, exposing single GraphQL API that exposes unified view of all the available data provides tremendous value","sidebar":"docs"},"federated/federated-directives":{"id":"federated/federated-directives","title":"Federated Directives","description":"graphql-kotlin supports a number of directives that can be used to annotate a schema and direct certain behaviors.","sidebar":"docs"},"federated/federated-schemas":{"id":"federated/federated-schemas","title":"Federated Schemas","description":"graphql-kotlin-federation library extends the functionality of the graphql-kotlin-schema-generator and allows you to","sidebar":"docs"},"federated/type-resolution":{"id":"federated/type-resolution","title":"Federated Type Resolution","description":"In traditional (i.e. non-federated) GraphQL servers, each one of the output types is accessible through a traversal of","sidebar":"docs"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"GraphQL Kotlin is a collection of libraries, built on top of graphql-java, that aim to simplify running GraphQL in Kotlin","sidebar":"docs"},"graphql-java-comparison":{"id":"graphql-java-comparison","title":"GraphQL Java Comparison","description":"graphql-java is one of the most popular JVM based GraphQL implemenations. GraphQL Kotlin is"},"plugins/gradle-plugin":{"id":"plugins/gradle-plugin","title":"Gradle Plugin","description":"GraphQL Kotlin Gradle Plugin provides functionality to introspect GraphQL schemas and generate a lightweight GraphQL HTTP client.","sidebar":"docs"},"plugins/maven-plugin":{"id":"plugins/maven-plugin","title":"Maven Plugin","description":"GraphQL Kotlin Maven Plugin provides functionality to introspect GraphQL schemas and generate a lightweight GraphQL HTTP client.","sidebar":"docs"},"schema-generator/customizing-schemas/advanced-features":{"id":"schema-generator/customizing-schemas/advanced-features","title":"Advanced Features","description":"Adding Custom Additional Types","sidebar":"docs"},"schema-generator/customizing-schemas/deprecating-schema":{"id":"schema-generator/customizing-schemas/deprecating-schema","title":"Deprecating Schema","description":"GraphQL schemas can have fields marked as deprecated. Instead of creating a custom annotation,","sidebar":"docs"},"schema-generator/customizing-schemas/directives":{"id":"schema-generator/customizing-schemas/directives","title":"Directives","description":"GraphQL directives can be used to transform the schema types, fields and arguments as well as modify the runtime","sidebar":"docs"},"schema-generator/customizing-schemas/documenting-fields":{"id":"schema-generator/customizing-schemas/documenting-fields","title":"Documenting Schema","description":"Since Javadocs are not available at runtime for introspection, graphql-kotlin-schema-generator includes an annotation","sidebar":"docs"},"schema-generator/customizing-schemas/excluding-fields":{"id":"schema-generator/customizing-schemas/excluding-fields","title":"Excluding Fields","description":"There are two ways to ensure the GraphQL schema generation omits fields when using Kotlin reflection:","sidebar":"docs"},"schema-generator/customizing-schemas/generator-config":{"id":"schema-generator/customizing-schemas/generator-config","title":"Generator Configuration","description":"graphql-kotlin-schema-generator provides a single function, toSchema, to generate a schema from Kotlin objects. This","sidebar":"docs"},"schema-generator/customizing-schemas/renaming-fields":{"id":"schema-generator/customizing-schemas/renaming-fields","title":"Renaming Fields","description":"By default, the schema generator will use the simple name of the underlying class for the type names and function/property names for fields.","sidebar":"docs"},"schema-generator/execution/async-models":{"id":"schema-generator/execution/async-models","title":"Async Models","description":"By default, graphql-kotlin-schema-generator will resolve all functions synchronously, i.e. it will block the","sidebar":"docs"},"schema-generator/execution/contextual-data":{"id":"schema-generator/execution/contextual-data","title":"Contextual Data","description":"All GraphQL servers have a concept of a \\"context\\". A GraphQL context contains metadata that is useful to the GraphQL","sidebar":"docs"},"schema-generator/execution/data-fetching-environment":{"id":"schema-generator/execution/data-fetching-environment","title":"Data Fetching Environment","description":"Each resolver has access to a DataFetchingEnvironment that provides additional information about the currently executed query including information about what data is requested","sidebar":"docs"},"schema-generator/execution/exceptions":{"id":"schema-generator/execution/exceptions","title":"Exceptions and Partial Data","description":"Returning GraphQL Errors","sidebar":"docs"},"schema-generator/execution/fetching-data":{"id":"schema-generator/execution/fetching-data","title":"Fetching Data","description":"Each field exposed through a GraphQL query has a corresponding resolver (aka data fetcher) associated with it. graphql-kotlin-schema-generator generates GraphQL schema","sidebar":"docs"},"schema-generator/execution/introspection":{"id":"schema-generator/execution/introspection","title":"Introspection","description":"By default, GraphQL servers expose a built-in system, called introspection, that exposes details about the underlying schema.","sidebar":"docs"},"schema-generator/execution/optional-undefined-arguments":{"id":"schema-generator/execution/optional-undefined-arguments","title":"Optional Undefined Arguments","description":"In GraphQL, input types can be optional which means that the client can either:","sidebar":"docs"},"schema-generator/execution/subscriptions":{"id":"schema-generator/execution/subscriptions","title":"Subscriptions","description":"Subscriptions are supported with graphql-java. See their documentation first:","sidebar":"docs"},"schema-generator/schema-generator-getting-started":{"id":"schema-generator/schema-generator-getting-started","title":"Getting Started with the Schema Generator","description":"Install","sidebar":"docs"},"schema-generator/writing-schemas/annotations":{"id":"schema-generator/writing-schemas/annotations","title":"Annotations","description":"graphql-kotlin-schema-generator ships with a number of annotation classes to allow you to enhance your GraphQL schema","sidebar":"docs"},"schema-generator/writing-schemas/arguments":{"id":"schema-generator/writing-schemas/arguments","title":"Arguments","description":"Method arguments are automatically exposed as part of the arguments to the corresponding GraphQL fields.","sidebar":"docs"},"schema-generator/writing-schemas/enums":{"id":"schema-generator/writing-schemas/enums","title":"Enums","description":"Enums are automatically mapped to GraphQL enum type.","sidebar":"docs"},"schema-generator/writing-schemas/interfaces":{"id":"schema-generator/writing-schemas/interfaces","title":"Interfaces","description":"Functions returning interfaces will automatically expose all the types implementing this interface that are available on","sidebar":"docs"},"schema-generator/writing-schemas/lists":{"id":"schema-generator/writing-schemas/lists","title":"Lists","description":"Both kotlin.Array and kotlin.collections.List are automatically mapped to the GraphQL List type (for unsupported","sidebar":"docs"},"schema-generator/writing-schemas/nested-arguments":{"id":"schema-generator/writing-schemas/nested-arguments","title":"Nested Resolvers and Shared Arguments","description":"There are a few ways in which shared arguments can be accessed from different resolver levels. Say we have the following schema:","sidebar":"docs"},"schema-generator/writing-schemas/nullability":{"id":"schema-generator/writing-schemas/nullability","title":"Nullability","description":"Both GraphQL and Kotlin have a concept of nullable as a marked typed. As a result we can automatically generate null","sidebar":"docs"},"schema-generator/writing-schemas/scalars":{"id":"schema-generator/writing-schemas/scalars","title":"Scalars","description":"Primitive Types","sidebar":"docs"},"schema-generator/writing-schemas/unions":{"id":"schema-generator/writing-schemas/unions","title":"Unions","description":"Marker interfaces (i.e. interfaces without any common fields or methods) are exposed as GraphQL union types. All the","sidebar":"docs"},"spring-server/http-request-response":{"id":"spring-server/http-request-response","title":"Access the HTTP Request-Response","description":"GraphQL is strongly typed and any data that is not part of the schema is no longer automatically known by the clients. Relying on this information becomes an \\"undocumented\\" part of your API. As a result, by default, GraphQL query resolvers do not have access to the raw HTTP request and response objects.","sidebar":"docs"},"spring-server/spring-beans":{"id":"spring-server/spring-beans","title":"Automatically Created Beans","description":"graphql-kotlin-spring-server automatically creates all the necessary beans to start GraphQL web server. Many of the beans are conditionally created and default behavior","sidebar":"docs"},"spring-server/spring-graphql-context":{"id":"spring-server/spring-graphql-context","title":"Generating GraphQL Context","description":"graphql-kotlin-spring-server provides a simple mechanism to build a GraphQL context per query execution through","sidebar":"docs"},"spring-server/spring-overview":{"id":"spring-server/spring-overview","title":"Spring Server Overview","description":"graphql-kotlin-spring-server","sidebar":"docs"},"spring-server/spring-properties":{"id":"spring-server/spring-properties","title":"Configuration Properties","description":"graphql-kotlin-spring-server relies on GraphQLConfigurationProperties","sidebar":"docs"},"spring-server/spring-schema":{"id":"spring-server/spring-schema","title":"Writing Schemas with Spring","description":"In order to expose your queries, mutations and/or subscriptions in the GraphQL schema you need to create beans that","sidebar":"docs"},"spring-server/subscriptions":{"id":"spring-server/subscriptions","title":"Subscriptions","description":"Schema","sidebar":"docs"}}}}')}}]);