"use strict";(self.webpackChunkgraphql_kotlin_docs=self.webpackChunkgraphql_kotlin_docs||[]).push([[7695],{5056:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>h});var r=t(74848),s=t(28453);const a={id:"annotations",title:"Annotations"},i=void 0,o={id:"schema-generator/customizing-schemas/annotations",title:"Annotations",description:"graphql-kotlin-schema-generator ships with a number of annotation classes to allow you to enhance your GraphQL schema",source:"@site/docs/schema-generator/customizing-schemas/annotations.md",sourceDirName:"schema-generator/customizing-schemas",slug:"/schema-generator/customizing-schemas/annotations",permalink:"/graphql-kotlin/docs/8.x.x/schema-generator/customizing-schemas/annotations",draft:!1,unlisted:!1,editUrl:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/website/docs/schema-generator/customizing-schemas/annotations.md",tags:[],version:"current",lastUpdatedBy:"Samuel Vazquez",lastUpdatedAt:1715034375,formattedLastUpdatedAt:"May 6, 2024",frontMatter:{id:"annotations",title:"Annotations"},sidebar:"docs",previous:{title:"Nested Resolvers and Shared Arguments",permalink:"/graphql-kotlin/docs/8.x.x/schema-generator/writing-schemas/nested-arguments"},next:{title:"Generator Configuration & Hooks",permalink:"/graphql-kotlin/docs/8.x.x/schema-generator/customizing-schemas/generator-config"}},c={},h=[];function l(e){const n={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"graphql-kotlin-schema-generator"})," ships with a number of annotation classes to allow you to enhance your GraphQL schema\nfor things that can't be directly derived from Kotlin reflection."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./documenting-schema",children:"@GraphQLDescription"})," - Provide a description for a GraphQL field"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./directives",children:"@GraphQLDirective"})," - Registers directive on a GraphQL field"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./excluding-fields",children:"@GraphQLIgnore"})," - Exclude field from the GraphQL schema"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./renaming-fields",children:"@GraphQLName"})," - Override the name used for the type"]}),"\n",(0,r.jsxs)(n.li,{children:["Kotlin built in ",(0,r.jsx)(n.a,{href:"./deprecating-schema",children:"@Deprecated"})," - Apply the GraphQL ",(0,r.jsx)(n.code,{children:"@deprecated"})," directive on the field"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./deprecating-schema",children:"@GraphQLDeprecated"})," - Apply the GraphQL ",(0,r.jsx)(n.code,{children:"@deprecated"})," directive but only in the schema, not in your own Kotlin code with ",(0,r.jsx)(n.code,{children:"@Deprecated"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"./custom-type-reference",children:"@GraphQLType"})," - Allows specifying a return type that is not the Kotlin code"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(96540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);