"use strict";(self.webpackChunkgraphql_kotlin_docs=self.webpackChunkgraphql_kotlin_docs||[]).push([[7222],{85162:(e,a,n)=>{n.d(a,{Z:()=>i});var t=n(67294),l=n(86010);const r={tabItem:"tabItem_Ymn6"};function i(e){var a=e.children,n=e.hidden,i=e.className;return t.createElement("div",{role:"tabpanel",className:(0,l.Z)(r.tabItem,i),hidden:n},a)}},74866:(e,a,n)=>{n.d(a,{Z:()=>N});var t=n(87462),l=n(67294),r=n(86010),i=n(12466),o=n(76775),u=n(91980),s=n(67392),p=n(50012);function c(e){return function(e){var a,n;return null!=(a=null==(n=l.Children.map(e,(function(e){if(!e||(0,l.isValidElement)(e)&&(a=e.props)&&"object"==typeof a&&"value"in a)return e;var a;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?a:[]}(e).map((function(e){var a=e.props;return{value:a.value,label:a.label,attributes:a.attributes,default:a.default}}))}function m(e){var a=e.values,n=e.children;return(0,l.useMemo)((function(){var e=null!=a?a:c(n);return function(e){var a=(0,s.l)(e,(function(e,a){return e.value===a.value}));if(a.length>0)throw new Error('Docusaurus error: Duplicate values "'+a.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[a,n])}function d(e){var a=e.value;return e.tabValues.some((function(e){return e.value===a}))}function g(e){var a=e.queryString,n=void 0!==a&&a,t=e.groupId,r=(0,o.k6)(),i=function(e){var a=e.queryString,n=void 0!==a&&a,t=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=t?t:null}({queryString:n,groupId:t});return[(0,u._X)(i),(0,l.useCallback)((function(e){if(i){var a=new URLSearchParams(r.location.search);a.set(i,e),r.replace(Object.assign({},r.location,{search:a.toString()}))}}),[i,r])]}function v(e){var a,n,t,r,i=e.defaultValue,o=e.queryString,u=void 0!==o&&o,s=e.groupId,c=m(e),v=(0,l.useState)((function(){return function(e){var a,n=e.defaultValue,t=e.tabValues;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+t.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var l=null!=(a=t.find((function(e){return e.default})))?a:t[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:i,tabValues:c})})),h=v[0],f=v[1],b=g({queryString:u,groupId:s}),k=b[0],y=b[1],N=(a=function(e){return e?"docusaurus.tab."+e:null}({groupId:s}.groupId),n=(0,p.Nk)(a),t=n[0],r=n[1],[t,(0,l.useCallback)((function(e){a&&r.set(e)}),[a,r])]),w=N[0],V=N[1],x=function(){var e=null!=k?k:w;return d({value:e,tabValues:c})?e:null}();return(0,l.useLayoutEffect)((function(){x&&f(x)}),[x]),{selectedValue:h,selectValue:(0,l.useCallback)((function(e){if(!d({value:e,tabValues:c}))throw new Error("Can't select invalid tab value="+e);f(e),y(e),V(e)}),[y,V,c]),tabValues:c}}var h=n(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){var a=e.className,n=e.block,o=e.selectedValue,u=e.selectValue,s=e.tabValues,p=[],c=(0,i.o5)().blockElementScrollPositionUntilNextRender,m=function(e){var a=e.currentTarget,n=p.indexOf(a),t=s[n].value;t!==o&&(c(a),u(t))},d=function(e){var a,n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":var t,l=p.indexOf(e.currentTarget)+1;n=null!=(t=p[l])?t:p[0];break;case"ArrowLeft":var r,i=p.indexOf(e.currentTarget)-1;n=null!=(r=p[i])?r:p[p.length-1]}null==(a=n)||a.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},a)},s.map((function(e){var a=e.value,n=e.label,i=e.attributes;return l.createElement("li",(0,t.Z)({role:"tab",tabIndex:o===a?0:-1,"aria-selected":o===a,key:a,ref:function(e){return p.push(e)},onKeyDown:d,onClick:m},i,{className:(0,r.Z)("tabs__item",f.tabItem,null==i?void 0:i.className,{"tabs__item--active":o===a})}),null!=n?n:a)})))}function k(e){var a=e.lazy,n=e.children,t=e.selectedValue,r=(Array.isArray(n)?n:[n]).filter(Boolean);if(a){var i=r.find((function(e){return e.props.value===t}));return i?(0,l.cloneElement)(i,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},r.map((function(e,a){return(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==t})})))}function y(e){var a=v(e);return l.createElement("div",{className:(0,r.Z)("tabs-container",f.tabList)},l.createElement(b,(0,t.Z)({},e,a)),l.createElement(k,(0,t.Z)({},e,a)))}function N(e){var a=(0,h.Z)();return l.createElement(y,(0,t.Z)({key:String(a)},e))}},44441:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>m,contentTitle:()=>p,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var t=n(87462),l=n(63366),r=(n(67294),n(3905)),i=(n(95657),n(74866)),o=n(85162),u=["components"],s={id:"gradle-plugin-usage-graalvm",title:"Gradle Plugin GraalVM Usage",sidebar_label:"GraalVM Native Image"},p=void 0,c={unversionedId:"plugins/gradle-plugin-usage-graalvm",id:"plugins/gradle-plugin-usage-graalvm",title:"Gradle Plugin GraalVM Usage",description:"GraalVm is a high performance runtime from Oracle that supports Ahead-of-Time (AOT) compilation",source:"@site/docs/plugins/gradle-plugin-usage-graalvm.mdx",sourceDirName:"plugins",slug:"/plugins/gradle-plugin-usage-graalvm",permalink:"/graphql-kotlin/docs/7.x.x/plugins/gradle-plugin-usage-graalvm",draft:!1,editUrl:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/website/docs/plugins/gradle-plugin-usage-graalvm.mdx",tags:[],version:"current",lastUpdatedBy:"Dariusz Kuc",lastUpdatedAt:1682983698,formattedLastUpdatedAt:"May 1, 2023",frontMatter:{id:"gradle-plugin-usage-graalvm",title:"Gradle Plugin GraalVM Usage",sidebar_label:"GraalVM Native Image"},sidebar:"docs",previous:{title:"Generating SDL",permalink:"/graphql-kotlin/docs/7.x.x/plugins/gradle-plugin-usage-sdl"},next:{title:"Goals Overview",permalink:"/graphql-kotlin/docs/7.x.x/plugins/maven-plugin-goals"}},m={},d=[{value:"Generating GraalVM Native Image",id:"generating-graalvm-native-image",level:2}],g={toc:d},v="wrapper";function h(e){var a=e.components,n=(0,l.Z)(e,u);return(0,r.kt)(v,(0,t.Z)({},g,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.graalvm.org/"},"GraalVm")," is a high performance runtime from Oracle that supports Ahead-of-Time (AOT) compilation\nthat allows you to build native images. By shifting compilation to the build time, we can create binaries that are\n",(0,r.kt)("strong",{parentName:"p"},"already optimized so they start almost instantaneously with immediate peak performance"),". Compiled code is also much\nmore memory efficient as we no longer need the big memory overhead of running the JVM."),(0,r.kt)("h2",{id:"generating-graalvm-native-image"},"Generating GraalVM Native Image"),(0,r.kt)("p",null,"In order to generate GraalVM Native image we need to provide the information about all the dynamic JVM features that our\napplication relies on. Since ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql-kotlin")," generates schema directly from your source code using reflections, we need\nto capture this information to make it available at build time. By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql-kotlin")," also relies on classpath scanning\nto look up all polymorphic types implementations as well as to locate all the (Apollo) Federated entity types."),(0,r.kt)("p",null,"Given following schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'class NativeExampleQuery : Query {\n    fun helloWorld() = "Hello World"\n}\n')),(0,r.kt)("p",null,"We first need to then configure our server to avoid class scanning. Even though our example schema does not contain any\npolymorphic types, ",(0,r.kt)("strong",{parentName:"p"},"we still need to explicitly opt-out of class scanning by providing type hierarchy"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun Application.graphQLModule() {\n    install(GraphQL) {\n        schema {\n            packages = listOf("com.example")\n            queries = listOf(\n                HelloWorldQuery()\n            )\n        }\n        // mapping between interfaces/union KClass and their implementation KClasses\n        typeHierarchy = mapOf()\n    }\n    install(Routing) {\n        graphQLPostRoute()\n        graphiQLRoute()\n    }\n}\n')),(0,r.kt)("p",null,"We then need to update our build with native configuration"),(0,r.kt)(i.Z,{defaultValue:"native",values:[{label:"Original Build File",value:"original"},{label:"Native Build File",value:"native"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"original",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\nplugins {\n    kotlin("jvm") version "1.7.21"\n    application\n}\n\ndependencies {\n    implementation("com.expediagroup", "graphql-kotlin-ktor-server", $latestGraphQLKotlinVersion)\n    implementation("ch.qos.logback", "logback-classic", "1.4.7")\n    implementation("io.ktor", "ktor-client-cio", "2.2.4")\n}\n\ntasks.withType<KotlinCompile> {\n    kotlinOptions.jvmTarget = "17"\n}\n\napplication {\n    mainClass.set("com.example.ApplicationKt")\n}\n'))),(0,r.kt)(o.Z,{value:"native",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'import com.expediagroup.graphql.plugin.gradle.graphql\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\nplugins {\n    kotlin("jvm") version "1.7.21"\n    application\n    id("org.graalvm.buildtools.native") version "0.9.21" // (1)\n    id("com.expediagroup.graphql") version $latestGraphQLKotlinVersion // (2)\n}\n\ndependencies {\n    implementation("com.expediagroup", "graphql-kotlin-ktor-server", $latestGraphQLKotlinVersion)\n    implementation("ch.qos.logback", "logback-classic", "1.4.7")\n    implementation("io.ktor", "ktor-client-cio", "2.2.4")\n}\n\ntasks.withType<KotlinCompile> {\n    kotlinOptions.jvmTarget = "17"\n}\n\napplication {\n    mainClass.set("com.example.ApplicationKt")\n}\n\ngraalvmNative { // (3)\n    toolchainDetection.set(false)\n    binaries {\n        named("main") {\n            verbose.set(true)\n            buildArgs.add("--initialize-at-build-time=io.ktor,kotlin,ch.qos.logback,org.slf4j")\n            buildArgs.add("-H:+ReportExceptionStackTraces")\n        }\n        // enable using reachability metadata repository\n        metadataRepository {\n            enabled.set(true)\n        }\n    }\n}\n\ngraphql { // (4)\n    graalVm {\n        packages = listOf("com.example")\n    }\n}\n')),(0,r.kt)("p",null,"We need to make couple changes to our build file to be able to generate GraalVM native image:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Apply ",(0,r.kt)("a",{parentName:"li",href:"https://graalvm.github.io/native-build-tools/latest/gradle-plugin.html"},"GraalVM Native Gradle plugin")),(0,r.kt)("li",{parentName:"ol"},"Apply GraphQL Kotlin Gradle plugin"),(0,r.kt)("li",{parentName:"ol"},"Configure GraalVM native image"),(0,r.kt)("li",{parentName:"ol"},"Configure GraphQL Kotlin GraalVM extension")))),(0,r.kt)("p",null,"Once the build is configured we can then generate our native image by running ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeCompile")," task."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"> ./gradlew nativeCompile\n")),(0,r.kt)("p",null,"Native executable image will then be generated under ",(0,r.kt)("inlineCode",{parentName:"p"},"build/native/nativeCompile")," directory."))}h.isMDXComponent=!0}}]);