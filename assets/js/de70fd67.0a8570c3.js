"use strict";(self.webpackChunkgraphql_kotlin_docs=self.webpackChunkgraphql_kotlin_docs||[]).push([[8553],{51143:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),a=(t(95657),["components"]),l={id:"ktor-configuration",title:"Ktor Plugin Configuration"},s=void 0,u={unversionedId:"server/ktor-server/ktor-configuration",id:"server/ktor-server/ktor-configuration",title:"Ktor Plugin Configuration",description:"graphql-kotlin-ktor-server plugin can be configured by using DSL when installing the plugin. Configuration is broken into multiple",source:"@site/docs/server/ktor-server/ktor-configuration.md",sourceDirName:"server/ktor-server",slug:"/server/ktor-server/ktor-configuration",permalink:"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-configuration",draft:!1,editUrl:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/website/docs/server/ktor-server/ktor-configuration.md",tags:[],version:"current",lastUpdatedBy:"Shane Myrick",lastUpdatedAt:1685995381,formattedLastUpdatedAt:"Jun 5, 2023",frontMatter:{id:"ktor-configuration",title:"Ktor Plugin Configuration"},sidebar:"docs",previous:{title:"HTTP request and response",permalink:"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-http-request-response"},next:{title:"Subscriptions",permalink:"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-subscriptions"}},p={},c=[{value:"Configuration Files",id:"configuration-files",level:2},{value:"Schema Configuration",id:"schema-configuration",level:2},{value:"GraphQL Execution Engine Configuration",id:"graphql-execution-engine-configuration",level:2},{value:"Server Configuration",id:"server-configuration",level:2},{value:"Routes Configuration",id:"routes-configuration",level:2},{value:"GraphQL POST route",id:"graphql-post-route",level:3},{value:"GraphQL GET route",id:"graphql-get-route",level:3},{value:"GraphQL Subscriptions route",id:"graphql-subscriptions-route",level:3},{value:"GraphQL SDL route",id:"graphql-sdl-route",level:3},{value:"GraphiQL IDE route",id:"graphiql-ide-route",level:3}],d={toc:c},g="wrapper";function h(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)(g,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graphql-kotlin-ktor-server")," plugin can be configured by using DSL when installing the plugin. Configuration is broken into multiple\ngroups related to specific functionality. See sections below for details."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"install(GraphQL) {\n    schema {\n        // configuration that controls schema generation logic\n    }\n    engine {\n        // configurations that control GraphQL execution engine\n    }\n    server {\n        // configurations that control GraphQL HTTP server\n    }\n}\n")),(0,i.kt)("h2",{id:"configuration-files"},"Configuration Files"),(0,i.kt)("p",null,"Ktor supports specifying configurations in ",(0,i.kt)("inlineCode",{parentName:"p"},"application.conf")," (HOCON) or ",(0,i.kt)("inlineCode",{parentName:"p"},"application.yaml")," file. By default, only HOCON format\nis supported. To use a YAML configuration file, you need to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"ktor-server-config-yaml")," dependency to your project dependencies.\nSee ",(0,i.kt)("a",{parentName:"p",href:"https://ktor.io/docs/configuration-file.html"},"Ktor documentation")," for details."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Not all configuration properties can be specified in your configuration file. You will need to use DSL to configure more advanced features\nthat cannot be represented in the property file syntax (e.g. any instantiated objects).")),(0,i.kt)("p",null,"All configuration options in ",(0,i.kt)("inlineCode",{parentName:"p"},"application.conf")," format, with their default values are provided below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'graphql {\n    schema {\n        // this is a required property that you need to set to appropriate value\n        // example value is just provided for illustration purposes\n        packages = [\n            "com.example"\n        ]\n        federation {\n            enabled = false\n            tracing {\n                enabled = true\n                debug = false\n            }\n        }\n    }\n    engine {\n        automaticPersistedQueries {\n            enabled = false\n        }\n        batching {\n            enabled = false\n            strategy = LEVEL_DISPATCHED\n        }\n        introspection {\n            enabled = true\n        }\n    }\n}\n')),(0,i.kt)("h2",{id:"schema-configuration"},"Schema Configuration"),(0,i.kt)("p",null,"This section configures ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql-kotlin-schema-generation")," logic and is the ",(0,i.kt)("strong",{parentName:"p"},"only")," section that has to be configured.\nAt a minimum you need to configure the list of packages that can contain your GraphQL schema definitions and a list of queries."),(0,i.kt)("p",null,"All configuration options, with their default values are provided below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'schema {\n    // this is a required property that you need to set to appropriate value\n    // example value is just provided for illustration purposes\n    packages = listOf("com.example")\n    // non-federated schemas, require at least a single query\n    queries = listOf()\n    mutations = listOf()\n    subscriptions = listOf()\n    schemaObject = null\n    // federated schemas require federated hooks\n    hooks = NoopSchemaGeneratorHooks\n    topLevelNames = TopLevelNames()\n    federation {\n        enabled = false\n        tracing {\n            enabled = true\n            debug = false\n        }\n    }\n    // required for GraalVM native servers\n    typeHierarchy = null\n}\n')),(0,i.kt)("h2",{id:"graphql-execution-engine-configuration"},"GraphQL Execution Engine Configuration"),(0,i.kt)("p",null,"This section configures ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql-java")," execution engine that will be used to process your GraphQL requests."),(0,i.kt)("p",null,"All configuration options, with their default values are provided below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"engine {\n    automaticPersistedQueries {\n        enabled = false\n    }\n    // DO NOT enable default batching logic if specifying custom provider\n    batching {\n        enabled = false\n        strategy = SYNC_EXHAUSTION\n    }\n    introspection {\n        enabled = true\n    }\n    dataFetcherFactoryProvider = SimpleKotlinDataFetcherFactoryProvider()\n    dataLoaderRegistryFactory = KotlinDataLoaderRegistryFactory()\n    exceptionHandler = SimpleDataFetcherExceptionHandler()\n    executionIdProvider = null\n    idValueUnboxer = IDValueUnboxer()\n    instrumentations = emptyList()\n    // DO NOT specify custom provider if enabling default batching logic\n    preparsedDocumentProvider = null\n}\n")),(0,i.kt)("h2",{id:"server-configuration"},"Server Configuration"),(0,i.kt)("p",null,"This section configures your GraphQL HTTP server."),(0,i.kt)("p",null,"All configuration options, with their default values are provided below."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"server {\n    contextFactory = DefaultKtorGraphQLContextFactory()\n    jacksonConfiguration = { }\n    requestParser = KtorGraphQLRequestParser(jacksonObjectMapper().apply(jacksonConfiguration))\n}\n")),(0,i.kt)("h2",{id:"routes-configuration"},"Routes Configuration"),(0,i.kt)("p",null,"GraphQL Kotlin Ktor Plugin DOES NOT automatically configure any routes. You need to explicitly configure ",(0,i.kt)("inlineCode",{parentName:"p"},"Routing"),"\nplugin with GraphQL routes. This allows you to selectively enable routes and wrap them in some additional logic (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"Authentication"),")."),(0,i.kt)("p",null,"GraphQL Kotlin Ktor Plugin provides following ",(0,i.kt)("inlineCode",{parentName:"p"},"Route")," extensions that can be called when configuring ",(0,i.kt)("inlineCode",{parentName:"p"},"Routing")," plugin."),(0,i.kt)("h3",{id:"graphql-post-route"},"GraphQL POST route"),(0,i.kt)("p",null,"This is the main route for processing your GraphQL requests. By default, it will use ",(0,i.kt)("inlineCode",{parentName:"p"},"/graphql")," endpoint and respond\nusing chunked encoding."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun Route.graphQLPostRoute(endpoint: String = "graphql", streamingResponse: Boolean = true, jacksonConfiguration: ObjectMapper.() -> Unit = {}): Route\n')),(0,i.kt)("h3",{id:"graphql-get-route"},"GraphQL GET route"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Only ",(0,i.kt)("inlineCode",{parentName:"p"},"Query")," operations are supported by the GET route.")),(0,i.kt)("p",null,"GraphQL route for processing GET requests. By default, it will use ",(0,i.kt)("inlineCode",{parentName:"p"},"/graphql")," endpoint and respond using chunked encoding."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun Route.graphQLGetRoute(endpoint: String = "graphql", streamingResponse: Boolean = true, jacksonConfiguration: ObjectMapper.() -> Unit = {}): Route\n')),(0,i.kt)("h3",{id:"graphql-subscriptions-route"},"GraphQL Subscriptions route"),(0,i.kt)("p",null,"GraphQL route for processing subscriptions. By default, it will use ",(0,i.kt)("inlineCode",{parentName:"p"},"/subscriptions")," endpoint and handle\nrequests using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md"},"graphql-transport-ws")," protocol handler."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun Route.graphQLSubscriptionsRoute(\n    endpoint: String = "subscriptions",\n    protocol: String? = null,\n    handlerOverride: KtorGraphQLSubscriptionHandler? = null,\n)\n')),(0,i.kt)("p",null,"See related ",(0,i.kt)("a",{parentName:"p",href:"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-subscriptions"},"Subscriptions")," document for more info."),(0,i.kt)("h3",{id:"graphql-sdl-route"},"GraphQL SDL route"),(0,i.kt)("p",null,"Convenience route to expose endpoint that returns your GraphQL schema in SDL format."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun Route.graphQLSDLRoute(endpoint: String = "sdl"): Route\n')),(0,i.kt)("h3",{id:"graphiql-ide-route"},"GraphiQL IDE route"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/graphql/graphiql"},"GraphiQL IDE")," is a convenient tool that helps you to easily interact\nwith your GraphQL server."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'fun Route.graphiQLRoute(endpoint: String = "graphiql", graphQLEndpoint: String = "graphql"): Route\n')))}h.isMDXComponent=!0}}]);