"use strict";(self.webpackChunkgraphql_kotlin_docs=self.webpackChunkgraphql_kotlin_docs||[]).push([[9720],{11905:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"7.x.x","label":"7.x.x","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-7.x.x","isLast":false,"docsSidebars":{"docs":[{"type":"category","label":"Introduction","items":[{"type":"link","label":"Getting Started","href":"/graphql-kotlin/docs/7.x.x/","docId":"getting-started","unlisted":false},{"type":"link","label":"Examples","href":"/graphql-kotlin/docs/7.x.x/examples","docId":"examples","unlisted":false},{"type":"link","label":"GraphQL Frameworks Comparison","href":"/graphql-kotlin/docs/7.x.x/framework-comparison","docId":"framework-comparison","unlisted":false},{"type":"link","label":"Blogs & Videos","href":"/graphql-kotlin/docs/7.x.x/blogs-and-videos","docId":"blogs-and-videos","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Schema Generator","items":[{"type":"link","label":"Getting Started","href":"/graphql-kotlin/docs/7.x.x/schema-generator/schema-generator-getting-started","docId":"schema-generator/schema-generator-getting-started","unlisted":false},{"type":"category","label":"Writing schemas with Kotlin","items":[{"type":"link","label":"Schema","href":"/graphql-kotlin/docs/7.x.x/schema-generator/writing-schemas/schema","docId":"schema-generator/writing-schemas/schema","unlisted":false},{"type":"link","label":"Types and Fields","href":"/graphql-kotlin/docs/7.x.x/schema-generator/writing-schemas/fields","docId":"schema-generator/writing-schemas/fields","unlisted":false},{"type":"link","label":"Nullability","href":"/graphql-kotlin/docs/7.x.x/schema-generator/writing-schemas/nullability","docId":"schema-generator/writing-schemas/nullability","unlisted":false},{"type":"link","label":"Arguments","href":"/graphql-kotlin/docs/7.x.x/schema-generator/writing-schemas/arguments","docId":"schema-generator/writing-schemas/arguments","unlisted":false},{"type":"link","label":"Scalars","href":"/graphql-kotlin/docs/7.x.x/schema-generator/writing-schemas/scalars","docId":"schema-generator/writing-schemas/scalars","unlisted":false},{"type":"link","label":"Enums","href":"/graphql-kotlin/docs/7.x.x/schema-generator/writing-schemas/enums","docId":"schema-generator/writing-schemas/enums","unlisted":false},{"type":"link","label":"Lists","href":"/graphql-kotlin/docs/7.x.x/schema-generator/writing-schemas/lists","docId":"schema-generator/writing-schemas/lists","unlisted":false},{"type":"link","label":"Interfaces","href":"/graphql-kotlin/docs/7.x.x/schema-generator/writing-schemas/interfaces","docId":"schema-generator/writing-schemas/interfaces","unlisted":false},{"type":"link","label":"Unions","href":"/graphql-kotlin/docs/7.x.x/schema-generator/writing-schemas/unions","docId":"schema-generator/writing-schemas/unions","unlisted":false},{"type":"link","label":"Nested Resolvers and Shared Arguments","href":"/graphql-kotlin/docs/7.x.x/schema-generator/writing-schemas/nested-arguments","docId":"schema-generator/writing-schemas/nested-arguments","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Customizing Schema","items":[{"type":"link","label":"Annotations","href":"/graphql-kotlin/docs/7.x.x/schema-generator/customizing-schemas/annotations","docId":"schema-generator/customizing-schemas/annotations","unlisted":false},{"type":"link","label":"Generator Configuration & Hooks","href":"/graphql-kotlin/docs/7.x.x/schema-generator/customizing-schemas/generator-config","docId":"schema-generator/customizing-schemas/generator-config","unlisted":false},{"type":"link","label":"Documenting Schema","href":"/graphql-kotlin/docs/7.x.x/schema-generator/customizing-schemas/documenting-schema","docId":"schema-generator/customizing-schemas/documenting-schema","unlisted":false},{"type":"link","label":"Excluding Fields","href":"/graphql-kotlin/docs/7.x.x/schema-generator/customizing-schemas/excluding-fields","docId":"schema-generator/customizing-schemas/excluding-fields","unlisted":false},{"type":"link","label":"Renaming Fields","href":"/graphql-kotlin/docs/7.x.x/schema-generator/customizing-schemas/renaming-fields","docId":"schema-generator/customizing-schemas/renaming-fields","unlisted":false},{"type":"link","label":"Directives","href":"/graphql-kotlin/docs/7.x.x/schema-generator/customizing-schemas/directives","docId":"schema-generator/customizing-schemas/directives","unlisted":false},{"type":"link","label":"Deprecating Schema","href":"/graphql-kotlin/docs/7.x.x/schema-generator/customizing-schemas/deprecating-schema","docId":"schema-generator/customizing-schemas/deprecating-schema","unlisted":false},{"type":"link","label":"Custom Types","href":"/graphql-kotlin/docs/7.x.x/schema-generator/customizing-schemas/custom-type-reference","docId":"schema-generator/customizing-schemas/custom-type-reference","unlisted":false},{"type":"link","label":"Restricting Input and Output Types","href":"/graphql-kotlin/docs/7.x.x/schema-generator/customizing-schemas/restricting-input-output","docId":"schema-generator/customizing-schemas/restricting-input-output","unlisted":false},{"type":"link","label":"Advanced Features","href":"/graphql-kotlin/docs/7.x.x/schema-generator/customizing-schemas/advanced-features","docId":"schema-generator/customizing-schemas/advanced-features","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Execution","items":[{"type":"link","label":"Fetching Data","href":"/graphql-kotlin/docs/7.x.x/schema-generator/execution/fetching-data","docId":"schema-generator/execution/fetching-data","unlisted":false},{"type":"link","label":"Async Models","href":"/graphql-kotlin/docs/7.x.x/schema-generator/execution/async-models","docId":"schema-generator/execution/async-models","unlisted":false},{"type":"link","label":"Exceptions and Partial Data","href":"/graphql-kotlin/docs/7.x.x/schema-generator/execution/exceptions","docId":"schema-generator/execution/exceptions","unlisted":false},{"type":"link","label":"Data Fetching Environment","href":"/graphql-kotlin/docs/7.x.x/schema-generator/execution/data-fetching-environment","docId":"schema-generator/execution/data-fetching-environment","unlisted":false},{"type":"link","label":"Contextual Data","href":"/graphql-kotlin/docs/7.x.x/schema-generator/execution/contextual-data","docId":"schema-generator/execution/contextual-data","unlisted":false},{"type":"link","label":"Optional Undefined Arguments","href":"/graphql-kotlin/docs/7.x.x/schema-generator/execution/optional-undefined-arguments","docId":"schema-generator/execution/optional-undefined-arguments","unlisted":false},{"type":"link","label":"Subscriptions","href":"/graphql-kotlin/docs/7.x.x/schema-generator/execution/subscriptions","docId":"schema-generator/execution/subscriptions","unlisted":false},{"type":"link","label":"Introspection","href":"/graphql-kotlin/docs/7.x.x/schema-generator/execution/introspection","docId":"schema-generator/execution/introspection","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Federation","items":[{"type":"link","label":"Apollo Federation","href":"/graphql-kotlin/docs/7.x.x/schema-generator/federation/apollo-federation","docId":"schema-generator/federation/apollo-federation","unlisted":false},{"type":"link","label":"Federated Schemas","href":"/graphql-kotlin/docs/7.x.x/schema-generator/federation/federated-schemas","docId":"schema-generator/federation/federated-schemas","unlisted":false},{"type":"link","label":"Federated Directives","href":"/graphql-kotlin/docs/7.x.x/schema-generator/federation/federated-directives","docId":"schema-generator/federation/federated-directives","unlisted":false},{"type":"link","label":"Federated Type Resolution","href":"/graphql-kotlin/docs/7.x.x/schema-generator/federation/type-resolution","docId":"schema-generator/federation/type-resolution","unlisted":false},{"type":"link","label":"Federation Tracing","href":"/graphql-kotlin/docs/7.x.x/schema-generator/federation/federation-tracing","docId":"schema-generator/federation/federation-tracing","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Server","items":[{"type":"link","label":"GraphQLServer","href":"/graphql-kotlin/docs/7.x.x/server/graphql-server","docId":"server/graphql-server","unlisted":false},{"type":"link","label":"GraphQLRequestParser","href":"/graphql-kotlin/docs/7.x.x/server/graphql-request-parser","docId":"server/graphql-request-parser","unlisted":false},{"type":"link","label":"GraphQLContextFactory","href":"/graphql-kotlin/docs/7.x.x/server/graphql-context-factory","docId":"server/graphql-context-factory","unlisted":false},{"type":"link","label":"GraphQLRequestHandler","href":"/graphql-kotlin/docs/7.x.x/server/graphql-request-handler","docId":"server/graphql-request-handler","unlisted":false},{"type":"link","label":"Subscriptions","href":"/graphql-kotlin/docs/7.x.x/server/server-subscriptions","docId":"server/server-subscriptions","unlisted":false},{"type":"link","label":"Automatic Persisted Queries (APQ)","href":"/graphql-kotlin/docs/7.x.x/server/automatic-persisted-queries/","docId":"server/automatic-persisted-queries/automatic-persisted-queries","unlisted":false},{"type":"category","label":"Data Loader","items":[{"type":"link","label":"Data Loaders","href":"/graphql-kotlin/docs/7.x.x/server/data-loader/","docId":"server/data-loader/data-loader","unlisted":false},{"type":"link","label":"Data Loader Instrumentations","href":"/graphql-kotlin/docs/7.x.x/server/data-loader/data-loader-instrumentation","docId":"server/data-loader/data-loader-instrumentation","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Spring Server","items":[{"type":"link","label":"Spring Server Overview","href":"/graphql-kotlin/docs/7.x.x/server/spring-server/spring-overview","docId":"server/spring-server/spring-overview","unlisted":false},{"type":"link","label":"Writing Schemas with Spring","href":"/graphql-kotlin/docs/7.x.x/server/spring-server/spring-schema","docId":"server/spring-server/spring-schema","unlisted":false},{"type":"link","label":"Generating GraphQL Context","href":"/graphql-kotlin/docs/7.x.x/server/spring-server/spring-graphql-context","docId":"server/spring-server/spring-graphql-context","unlisted":false},{"type":"link","label":"HTTP Request and Response","href":"/graphql-kotlin/docs/7.x.x/server/spring-server/spring-http-request-response","docId":"server/spring-server/spring-http-request-response","unlisted":false},{"type":"link","label":"Automatically Created Beans","href":"/graphql-kotlin/docs/7.x.x/server/spring-server/spring-beans","docId":"server/spring-server/spring-beans","unlisted":false},{"type":"link","label":"Configuration Properties","href":"/graphql-kotlin/docs/7.x.x/server/spring-server/spring-properties","docId":"server/spring-server/spring-properties","unlisted":false},{"type":"link","label":"Subscriptions","href":"/graphql-kotlin/docs/7.x.x/server/spring-server/spring-subscriptions","docId":"server/spring-server/spring-subscriptions","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Ktor Server Plugin","items":[{"type":"link","label":"Ktor Server Overview","href":"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-overview","docId":"server/ktor-server/ktor-overview","unlisted":false},{"type":"link","label":"Writing Schemas with Ktor","href":"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-schema","docId":"server/ktor-server/ktor-schema","unlisted":false},{"type":"link","label":"Generating GraphQL Context","href":"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-graphql-context","docId":"server/ktor-server/ktor-graphql-context","unlisted":false},{"type":"link","label":"HTTP request and response","href":"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-http-request-response","docId":"server/ktor-server/ktor-http-request-response","unlisted":false},{"type":"link","label":"Ktor Plugin Configuration","href":"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-configuration","docId":"server/ktor-server/ktor-configuration","unlisted":false},{"type":"link","label":"Subscriptions","href":"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-subscriptions","docId":"server/ktor-server/ktor-subscriptions","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Client","items":[{"type":"link","label":"Client Overview","href":"/graphql-kotlin/docs/7.x.x/client/client-overview","docId":"client/client-overview","unlisted":false},{"type":"link","label":"Client Features","href":"/graphql-kotlin/docs/7.x.x/client/client-features","docId":"client/client-features","unlisted":false},{"type":"link","label":"Client Customization","href":"/graphql-kotlin/docs/7.x.x/client/client-customization","docId":"client/client-customization","unlisted":false},{"type":"link","label":"Client Serialization","href":"/graphql-kotlin/docs/7.x.x/client/client-serialization","docId":"client/client-serialization","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Build Plugins","items":[{"type":"category","label":"Gradle Plugin","items":[{"type":"link","label":"Tasks Overiew","href":"/graphql-kotlin/docs/7.x.x/plugins/gradle-plugin-tasks","docId":"plugins/gradle-plugin-tasks","unlisted":false},{"type":"link","label":"Generating Client","href":"/graphql-kotlin/docs/7.x.x/plugins/gradle-plugin-usage-client","docId":"plugins/gradle-plugin-usage-client","unlisted":false},{"type":"link","label":"Generating SDL","href":"/graphql-kotlin/docs/7.x.x/plugins/gradle-plugin-usage-sdl","docId":"plugins/gradle-plugin-usage-sdl","unlisted":false},{"type":"link","label":"GraalVM Native Image","href":"/graphql-kotlin/docs/7.x.x/plugins/gradle-plugin-usage-graalvm","docId":"plugins/gradle-plugin-usage-graalvm","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Maven Plugin","items":[{"type":"link","label":"Goals Overview","href":"/graphql-kotlin/docs/7.x.x/plugins/maven-plugin-goals","docId":"plugins/maven-plugin-goals","unlisted":false},{"type":"link","label":"Generating Client","href":"/graphql-kotlin/docs/7.x.x/plugins/maven-plugin-usage-client","docId":"plugins/maven-plugin-usage-client","unlisted":false},{"type":"link","label":"Generating SDL","href":"/graphql-kotlin/docs/7.x.x/plugins/maven-plugin-usage-sdl","docId":"plugins/maven-plugin-usage-sdl","unlisted":false},{"type":"link","label":"GraalVM Native Image","href":"/graphql-kotlin/docs/7.x.x/plugins/maven-plugin-usage-graalvm","docId":"plugins/maven-plugin-usage-graalvm","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Schema Generator Hooks Provider","href":"/graphql-kotlin/docs/7.x.x/plugins/hooks-provider","docId":"plugins/hooks-provider","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"blogs-and-videos":{"id":"blogs-and-videos","title":"Blogs & Videos","description":"Here are some links to other blog posts and videos which may provide further examples and reading.","sidebar":"docs"},"client/client-customization":{"id":"client/client-customization","title":"Client Customization","description":"Ktor HTTP Client Customization","sidebar":"docs"},"client/client-features":{"id":"client/client-features","title":"Client Features","description":"Jackson and Kotlinx Serialization Support","sidebar":"docs"},"client/client-overview":{"id":"client/client-overview","title":"Client Overview","description":"GraphQL Kotlin provides a set of lightweight type-safe GraphQL HTTP clients. The library provides Ktor HTTP client","sidebar":"docs"},"client/client-serialization":{"id":"client/client-serialization","title":"Client Serialization","description":"GraphQL Kotlin build plugins can generate GraphQL client data classes that are compatible with Jackson","sidebar":"docs"},"examples":{"id":"examples","title":"Examples","description":"A collection of example apps that use graphql-kotlin libraries to test and demonstrate usages can be found in the examples module.","sidebar":"docs"},"framework-comparison":{"id":"framework-comparison","title":"GraphQL Frameworks Comparison","description":"GraphQL Java","sidebar":"docs"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"GraphQL Kotlin is a collection of libraries, built on top of graphql-java, that simplify running GraphQL clients and servers in Kotlin.","sidebar":"docs"},"plugins/gradle-plugin-tasks":{"id":"plugins/gradle-plugin-tasks","title":"Gradle Plugin Tasks","description":"GraphQL Kotlin Gradle Plugin provides functionality to generate a lightweight GraphQL HTTP client and generate GraphQL","sidebar":"docs"},"plugins/gradle-plugin-usage-client":{"id":"plugins/gradle-plugin-usage-client","title":"Gradle Plugin Client Usage","description":"GraphQL Kotlin plugins can be used to generate a lightweight type-safe GraphQL HTTP clients. See examples below for more","sidebar":"docs"},"plugins/gradle-plugin-usage-graalvm":{"id":"plugins/gradle-plugin-usage-graalvm","title":"Gradle Plugin GraalVM Usage","description":"GraalVm is a high performance runtime from Oracle that supports Ahead-of-Time (AOT) compilation","sidebar":"docs"},"plugins/gradle-plugin-usage-sdl":{"id":"plugins/gradle-plugin-usage-sdl","title":"Gradle Plugin SDL Usage","description":"GraphQL Kotlin follows a code-first approach where schema is auto generated from your source code at runtime. GraphQL Kotlin","sidebar":"docs"},"plugins/hooks-provider":{"id":"plugins/hooks-provider","title":"Schema Generator Hooks Provider","description":"GraphQL Kotlin plugins can generate GraphQL schema as your build artifact directly from your source code. Plugins will scan","sidebar":"docs"},"plugins/maven-plugin-goals":{"id":"plugins/maven-plugin-goals","title":"Maven Plugin Goals","description":"GraphQL Kotlin Maven Plugin provides functionality to generate a lightweight GraphQL HTTP client and generate GraphQL","sidebar":"docs"},"plugins/maven-plugin-usage-client":{"id":"plugins/maven-plugin-usage-client","title":"Maven Plugin Client Usage","description":"GraphQL Kotlin plugins can be used to generate a lightweight type-safe GraphQL HTTP clients. See examples below for more","sidebar":"docs"},"plugins/maven-plugin-usage-graalvm":{"id":"plugins/maven-plugin-usage-graalvm","title":"Maven Plugin GraalVM Usage","description":"GraalVm is a high performance runtime from Oracle that supports Ahead-of-Time (AOT) compilation","sidebar":"docs"},"plugins/maven-plugin-usage-sdl":{"id":"plugins/maven-plugin-usage-sdl","title":"Maven Plugin SDL Usage","description":"GraphQL Kotlin follows a code-first approach where schema is auto generated from your source code at runtime. GraphQL Kotlin","sidebar":"docs"},"schema-generator/customizing-schemas/advanced-features":{"id":"schema-generator/customizing-schemas/advanced-features","title":"Advanced Features","description":"Adding Custom Additional Types","sidebar":"docs"},"schema-generator/customizing-schemas/annotations":{"id":"schema-generator/customizing-schemas/annotations","title":"Annotations","description":"graphql-kotlin-schema-generator ships with a number of annotation classes to allow you to enhance your GraphQL schema","sidebar":"docs"},"schema-generator/customizing-schemas/custom-type-reference":{"id":"schema-generator/customizing-schemas/custom-type-reference","title":"Custom Types","description":"Code-first has many advantages and removes duplication. However, one downside is that the types defined have to match","sidebar":"docs"},"schema-generator/customizing-schemas/deprecating-schema":{"id":"schema-generator/customizing-schemas/deprecating-schema","title":"Deprecating Schema","description":"GraphQL schemas supports deprecation directive on","sidebar":"docs"},"schema-generator/customizing-schemas/directives":{"id":"schema-generator/customizing-schemas/directives","title":"Directives","description":"GraphQL directives can be used to transform the schema types, fields and arguments as well as modify the runtime","sidebar":"docs"},"schema-generator/customizing-schemas/documenting-schema":{"id":"schema-generator/customizing-schemas/documenting-schema","title":"Documenting Schema","description":"Since Javadocs are not available at runtime for introspection, graphql-kotlin-schema-generator includes an annotation","sidebar":"docs"},"schema-generator/customizing-schemas/excluding-fields":{"id":"schema-generator/customizing-schemas/excluding-fields","title":"Excluding Fields","description":"There are two ways to ensure the GraphQL schema generation omits fields when using Kotlin reflection:","sidebar":"docs"},"schema-generator/customizing-schemas/generator-config":{"id":"schema-generator/customizing-schemas/generator-config","title":"Generator Configuration & Hooks","description":"graphql-kotlin-schema-generator provides a single function, toSchema, to generate a schema from Kotlin objects. This","sidebar":"docs"},"schema-generator/customizing-schemas/renaming-fields":{"id":"schema-generator/customizing-schemas/renaming-fields","title":"Renaming Fields","description":"By default, the schema generator will use the simple name of the underlying class for the type names and function/property names for fields.","sidebar":"docs"},"schema-generator/customizing-schemas/restricting-input-output":{"id":"schema-generator/customizing-schemas/restricting-input-output","title":"Restricting Input and Output Types","description":"Since we are using Kotlin classes to represent both GraphQL input and output objects we can use the same class for both and the generator will handle type conflicts.","sidebar":"docs"},"schema-generator/execution/async-models":{"id":"schema-generator/execution/async-models","title":"Async Models","description":"By default, graphql-kotlin-schema-generator will resolve all functions synchronously, i.e. it will block the","sidebar":"docs"},"schema-generator/execution/contextual-data":{"id":"schema-generator/execution/contextual-data","title":"Contextual Data","description":"All GraphQL servers have a concept of a \\"context\\". A GraphQL context contains metadata that is useful to the GraphQL","sidebar":"docs"},"schema-generator/execution/data-fetching-environment":{"id":"schema-generator/execution/data-fetching-environment","title":"Data Fetching Environment","description":"Each resolver has access to a DataFetchingEnvironment that provides additional information about the currently executed query including information about what data is requested","sidebar":"docs"},"schema-generator/execution/exceptions":{"id":"schema-generator/execution/exceptions","title":"Exceptions and Partial Data","description":"Returning GraphQL Errors","sidebar":"docs"},"schema-generator/execution/fetching-data":{"id":"schema-generator/execution/fetching-data","title":"Fetching Data","description":"Each field exposed in the GraphQL schema has a corresponding resolver (aka data fetcher) associated with it. graphql-kotlin-schema-generator generates the GraphQL schema","sidebar":"docs"},"schema-generator/execution/introspection":{"id":"schema-generator/execution/introspection","title":"Introspection","description":"By default, GraphQL servers expose a built-in system, called introspection, that exposes details about the underlying schema.","sidebar":"docs"},"schema-generator/execution/optional-undefined-arguments":{"id":"schema-generator/execution/optional-undefined-arguments","title":"Optional Undefined Arguments","description":"In the GraphQL world, input types can be optional which means that the client can either:","sidebar":"docs"},"schema-generator/execution/subscriptions":{"id":"schema-generator/execution/subscriptions","title":"Subscriptions","description":"Subscriptions are supported with graphql-java. See their documentation first:","sidebar":"docs"},"schema-generator/federation/apollo-federation":{"id":"schema-generator/federation/apollo-federation","title":"Apollo Federation","description":"In many cases, exposing single GraphQL API that exposes unified view of all the available data provides tremendous value","sidebar":"docs"},"schema-generator/federation/federated-directives":{"id":"schema-generator/federation/federated-directives","title":"Federated Directives","description":"graphql-kotlin supports a number of directives that can be used to annotate a schema and direct certain behaviors.","sidebar":"docs"},"schema-generator/federation/federated-schemas":{"id":"schema-generator/federation/federated-schemas","title":"Federated Schemas","description":"graphql-kotlin-federation library extends the functionality of the graphql-kotlin-schema-generator and allows you to","sidebar":"docs"},"schema-generator/federation/federation-tracing":{"id":"schema-generator/federation/federation-tracing","title":"Federation Tracing","description":"graphql-kotlin-federation module relies on apollographql/federation-jvm","sidebar":"docs"},"schema-generator/federation/type-resolution":{"id":"schema-generator/federation/type-resolution","title":"Federated Type Resolution","description":"In traditional (i.e. non-federated) GraphQL servers, each one of the output types is accessible through a traversal of","sidebar":"docs"},"schema-generator/schema-generator-getting-started":{"id":"schema-generator/schema-generator-getting-started","title":"Getting Started","description":"Install","sidebar":"docs"},"schema-generator/writing-schemas/arguments":{"id":"schema-generator/writing-schemas/arguments","title":"Arguments","description":"Method arguments are automatically exposed as part of the arguments to the corresponding GraphQL fields.","sidebar":"docs"},"schema-generator/writing-schemas/enums":{"id":"schema-generator/writing-schemas/enums","title":"Enums","description":"Enums are automatically mapped to GraphQL enum type.","sidebar":"docs"},"schema-generator/writing-schemas/fields":{"id":"schema-generator/writing-schemas/fields","title":"Types and Fields","description":"graphql-kotlin-schema-generator uses reflection to automatically map","sidebar":"docs"},"schema-generator/writing-schemas/interfaces":{"id":"schema-generator/writing-schemas/interfaces","title":"Interfaces","description":"Kotlin interfaces, abstract and sealed classes will be mapped to a GraphQL interface. Due to the GraphQL distinction between interface","sidebar":"docs"},"schema-generator/writing-schemas/lists":{"id":"schema-generator/writing-schemas/lists","title":"Lists","description":"kotlin.collections.List is automatically mapped to the GraphQL List type. Type arguments provided to Kotlin collections","sidebar":"docs"},"schema-generator/writing-schemas/nested-arguments":{"id":"schema-generator/writing-schemas/nested-arguments","title":"Nested Resolvers and Shared Arguments","description":"There are a few ways in which shared arguments can be accessed from different resolver levels. Say we have the following schema:","sidebar":"docs"},"schema-generator/writing-schemas/nullability":{"id":"schema-generator/writing-schemas/nullability","title":"Nullability","description":"Both GraphQL and Kotlin have a concept of nullable as a marked typed. As a result we can automatically generate null","sidebar":"docs"},"schema-generator/writing-schemas/scalars":{"id":"schema-generator/writing-schemas/scalars","title":"Scalars","description":"Primitive Types","sidebar":"docs"},"schema-generator/writing-schemas/schema":{"id":"schema-generator/writing-schemas/schema","title":"Schema","description":"Schema Object","sidebar":"docs"},"schema-generator/writing-schemas/unions":{"id":"schema-generator/writing-schemas/unions","title":"Unions","description":"GraphQL Kotlin allows for two ways of defining unions in the schema","sidebar":"docs"},"server/automatic-persisted-queries/automatic-persisted-queries":{"id":"server/automatic-persisted-queries/automatic-persisted-queries","title":"Automatic Persisted Queries (APQ)","description":"APQ is technique created by Apollo to improve","sidebar":"docs"},"server/data-loader/data-loader":{"id":"server/data-loader/data-loader","title":"Data Loaders","description":"Data Loaders are a popular caching pattern from the JavaScript GraphQL implementation.","sidebar":"docs"},"server/data-loader/data-loader-instrumentation":{"id":"server/data-loader/data-loader-instrumentation","title":"Data Loader Instrumentations","description":"graphql-kotlin-dataloader-instrumentation is set of custom Instrumentations","sidebar":"docs"},"server/graphql-context-factory":{"id":"server/graphql-context-factory","title":"GraphQLContextFactory","description":"If you are using graphql-kotlin-spring-server, see the Spring specific documentation.","sidebar":"docs"},"server/graphql-request-handler":{"id":"server/graphql-request-handler","title":"GraphQLRequestHandler","description":"The GraphQLRequestHandler is an open and extendable class that contains the basic logic to get a GraphQLResponse.","sidebar":"docs"},"server/graphql-request-parser":{"id":"server/graphql-request-parser","title":"GraphQLRequestParser","description":"The GraphQLRequestParser interface is required to parse the library-specific HTTP request object into the common GraphQLServerRequest class.","sidebar":"docs"},"server/graphql-server":{"id":"server/graphql-server","title":"GraphQLServer","description":"graphql-kotlin-server provides common code and basic interfaces to setup a GraphQL server in any framework.","sidebar":"docs"},"server/ktor-server/ktor-configuration":{"id":"server/ktor-server/ktor-configuration","title":"Ktor Plugin Configuration","description":"graphql-kotlin-ktor-server plugin can be configured by using DSL when installing the plugin. Configuration is broken into multiple","sidebar":"docs"},"server/ktor-server/ktor-graphql-context":{"id":"server/ktor-server/ktor-graphql-context","title":"Generating GraphQL Context","description":"graphql-kotlin-ktor-server provides a Ktor specific implementation of GraphQLContextFactory","sidebar":"docs"},"server/ktor-server/ktor-http-request-response":{"id":"server/ktor-server/ktor-http-request-response","title":"HTTP request and response","description":"Ktor HTTP request/response can be intercepted by installing various plugins to your module or by intercepting specific","sidebar":"docs"},"server/ktor-server/ktor-overview":{"id":"server/ktor-server/ktor-overview","title":"Ktor Server Overview","description":"graphql-kotlin-ktor-server","sidebar":"docs"},"server/ktor-server/ktor-schema":{"id":"server/ktor-server/ktor-schema","title":"Writing Schemas with Ktor","description":"GraphQL schema, queries and mutation objects have to implement the corresponding marker interface. You can then configure","sidebar":"docs"},"server/ktor-server/ktor-subscriptions":{"id":"server/ktor-server/ktor-subscriptions","title":"Subscriptions","description":"_To see more details on how to implement subscriptions in your schema, see the schema generator docs on executing subscriptions.","sidebar":"docs"},"server/server-subscriptions":{"id":"server/server-subscriptions","title":"Subscriptions","description":"GraphQL Kotlin provides WebSocket subscription support with the generic Flow based implementation of [GraphQL WS subscription","sidebar":"docs"},"server/spring-server/spring-beans":{"id":"server/spring-server/spring-beans","title":"Automatically Created Beans","description":"graphql-kotlin-spring-server automatically creates all the necessary beans to start a GraphQL server.","sidebar":"docs"},"server/spring-server/spring-graphql-context":{"id":"server/spring-server/spring-graphql-context","title":"Generating GraphQL Context","description":"graphql-kotlin-spring-server provides a Spring specific implementation of GraphQLContextFactory","sidebar":"docs"},"server/spring-server/spring-http-request-response":{"id":"server/spring-server/spring-http-request-response","title":"HTTP Request and Response","description":"To access the HTTP request and response methods, use  Spring WebFilter.","sidebar":"docs"},"server/spring-server/spring-overview":{"id":"server/spring-server/spring-overview","title":"Spring Server Overview","description":"graphql-kotlin-spring-server","sidebar":"docs"},"server/spring-server/spring-properties":{"id":"server/spring-server/spring-properties","title":"Configuration Properties","description":"graphql-kotlin-spring-server relies","sidebar":"docs"},"server/spring-server/spring-schema":{"id":"server/spring-server/spring-schema","title":"Writing Schemas with Spring","description":"In order to expose your schema directives, queries, mutations, and subscriptions in the GraphQL schema create beans that","sidebar":"docs"},"server/spring-server/spring-subscriptions":{"id":"server/spring-server/spring-subscriptions","title":"Subscriptions","description":"_To see more details on how to implement subscriptions in your schema, see the schema generator docs on executing subscriptions.","sidebar":"docs"}}}}')}}]);