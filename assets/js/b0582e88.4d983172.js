"use strict";(self.webpackChunkgraphql_kotlin_docs=self.webpackChunkgraphql_kotlin_docs||[]).push([[8012],{5479:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),s=(r(8561),["components"]),i={id:"ktor-schema",title:"Writing Schemas with Ktor"},c=void 0,l={unversionedId:"server/ktor-server/ktor-schema",id:"server/ktor-server/ktor-schema",title:"Writing Schemas with Ktor",description:"GraphQL schema, queries and mutation objects have to implement the corresponding marker interface. You can then configure",source:"@site/docs/server/ktor-server/ktor-schema.md",sourceDirName:"server/ktor-server",slug:"/server/ktor-server/ktor-schema",permalink:"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-schema",draft:!1,editUrl:"https://github.com/ExpediaGroup/graphql-kotlin/tree/master/website/docs/server/ktor-server/ktor-schema.md",tags:[],version:"current",lastUpdatedBy:"Samuel Vazquez",lastUpdatedAt:1681792398,formattedLastUpdatedAt:"Apr 18, 2023",frontMatter:{id:"ktor-schema",title:"Writing Schemas with Ktor"},sidebar:"docs",previous:{title:"Ktor Server Overview",permalink:"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-overview"},next:{title:"Generating GraphQL Context",permalink:"/graphql-kotlin/docs/7.x.x/server/ktor-server/ktor-graphql-context"}},m={},p=[],h={toc:p};function u(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"GraphQL schema, queries and mutation objects have to implement the corresponding marker interface. You can then configure\nGraphQL plugin with references to your objects."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@ContactDirective(\n    name = "My Team Name",\n    url = "https://myteam.slack.com/archives/teams-chat-room-url",\n    description = "send urgent issues to [#oncall](https://yourteam.slack.com/archives/oncall)."\n)\n@GraphQLDescription("My schema description")\nclass MySchema : Schema\n\n\nclass HelloWorldQuery : Query {\n    fun hello(): String = "Hello World!"\n}\n\nclass UpdateGreetingMutation : Mutation {\n    fun updateGreeting(greeting: String): String = TODO()\n}\n\nfun Application.graphQLModule() {\n    install(GraphQL) {\n        schema {\n            packages = listOf("com.example")\n            queries = listOf(\n                HelloWorldQuery()\n            )\n            mutations = listOf(\n                UpdateGreetingMutation()\n            )\n            schemaObject = MySchema()\n        }\n    }\n}\n')),(0,o.kt)("p",null,"Above code will generate following GraphQL schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},'schema @contact(description : "send urgent issues to [#oncall](https://yourteam.slack.com/archives/oncall).", name : "My Team Name", url : "https://myteam.slack.com/archives/teams-chat-room-url"){\n  query: Query\n  mutation: Mutation\n}\n\ntype Query {\n  hello: String!\n}\n\ntype Mutation {\n    updateGreeting(greeting: String!): String!\n}\n')))}u.isMDXComponent=!0}}]);